@startuml
title: Messaging: Sending & Receiving Messages
hide unlinked
actor User
actor Creator
boundary Gateway
entity AuthorizationService
collections MessageService
control MessageHandler
entity RedisCache
entity RedisMQ
database MessageDB
collections ListService
collections BillingService


User -> MessageService: Message {\n\
  sender_id (from authz),\n\
  recipient_id,\n\
  recipient_type,\n\
  tip_amount,\n\
}
note right User: Via open websocket connection.\n\
Message could also be sent via\n\
an HTTP POST endpoint, through the Gateway.
alt recipient_type == 'group'
   MessageService -> ListService: Get lists for creator
   ListService -> MessageService
   MessageService -> MessageService: Verify list exists for creator
   alt List Is Invalid OR User is not a Creator
     MessageService -> User: Error
   end
else
   MessageService -> MessageService: Verify recipient exists
end
MessageService -> RedisMQ: Add Message to Queue
MessageService -> User: OK
group async loop
   RedisMQ -> MessageHandler: Next Message
   alt recipient_type == 'group'
     MessageHandler -> ListService: Get list of recipients for group
     ListService -> MessageHandler
   end
   loop For each recipient
   MessageHandler -> MessageDB: Lookup if recipient has blocked sender
   MessageDB -> MessageHandler

   group Tipping: If recipient.is_creator() and tip_amount > 0
    MessageHandler -> BillingService: Process Tip Payment
    BillingService -> MessageHandler
    group If failure
      MessageHandler -> RedisMQ: Message {\n\
      sender_id: SYSTEM_USER_ID\n\
      recipient_id: sender_id\n\
      message: "Payment failed"\n\
}
      note right MessageHandler:Queue a new message on failure to\nalert member that payment failed
     end
   end

   alt If not blocked
   MessageHandler -> MessageDB: Save message
   MessageHandler -> RedisCache: Get Active Connections for recipient
   RedisCache -> MessageHandler
   loop For each open Connection
      note left MessageHandler: Sent to the specific\nserver instance
      MessageHandler -> MessageService: message
      MessageService -> User: Notify recipient via websocket
      note right User: This is a different User than initiated the flow, via open websocket
   end
   end
   end
end

@enduml
